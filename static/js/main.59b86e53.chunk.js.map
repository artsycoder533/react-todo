{"version":3,"sources":["components/Overview.js","App.js","index.js"],"names":["Overview","props","tasks","count","deleteTask","allowEdit","handleEditChange","replaceTask","map","task","index","className","isEditable","message","id","onChange","type","placeholder","onClick","App","handleInputChange","e","setState","text","target","value","state","changeText","console","log","addTask","preventDefault","concat","resetTask","uniqid","filter","copy","findIndex","this","htmlFor","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.59b86e53.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { FiEdit3 } from \"react-icons/fi\";\r\nimport { FiTrash2 } from \"react-icons/fi\";\r\nimport { FiCheck } from \"react-icons/fi\";\r\nimport { FiCheckCircle } from \"react-icons/fi\";\r\n\r\nconst Overview = (props) => {\r\n    const { tasks, count, deleteTask, allowEdit, handleEditChange, replaceTask} = props;\r\n\r\n    //if isEditable is true rerender and swap out span for an input with value of the task that was clicked to be edited\r\n    const showInput = (isEditable, message, id) => {\r\n        // console.log(task);\r\n        if (isEditable === true) {\r\n            return (\r\n                <>\r\n                    <input onChange={handleEditChange} type=\"text\" placeholder={message}></input>\r\n                    <button\r\n                        onClick={() => replaceTask(id, message)}\r\n                        type=\"submit\"\r\n                        className=\"btn btn-check\"\r\n                        id=\"check\">\r\n                        <FiCheck />\r\n                    </button>\r\n                </>\r\n            );\r\n        }\r\n        else {\r\n            return (\r\n                <>\r\n                    <span className=\"text\">{message}</span>\r\n                    <button\r\n                        onClick={() => allowEdit(id, message)}\r\n                        className=\"btn btn-edit\"\r\n                        id=\"edit\">\r\n                        <FiEdit3 />\r\n                    </button>\r\n                </>\r\n            );\r\n        }\r\n    }\r\n\r\n    return (\r\n        <ul>\r\n            {tasks.map((task, index) => {\r\n                return (\r\n                    <li key={task.id}>\r\n                        <span className=\"count\">({index + 1}/{count}) - </span>\r\n                        {showInput(task.isEditable, task.message, task.id, index)}\r\n                        <button onClick={() => deleteTask(task.id)}className=\"btn btn-delete\" id=\"delete\">\r\n                            <FiTrash2 />\r\n                        </button>\r\n                    </li>\r\n                )\r\n            })}\r\n        </ul>\r\n    );\r\n};\r\n\r\nexport default Overview;","import React, { Component } from 'react';\r\nimport Overview from \"./components/Overview\";\r\nimport uniqid from 'uniqid';\r\n\r\nclass App extends Component{\r\n  constructor () {\r\n    super();\r\n\r\n    this.state = {\r\n\t\t\t//task.text will be the state handling what we type in our input field\r\n\t\t\ttask: {\r\n        text: \"\",\r\n        changeText: \"\",\r\n        message: \"\",\r\n\t\t\t\t// sets id to a unique id based on time. etc.\r\n        id: uniqid(),\r\n        isEditable: false,\r\n\t\t\t},\r\n\t\t\t//tasks initially set to an empty array, where we will store all our tasks\r\n      tasks: [],\r\n      count: 0,\r\n\t\t};\r\n  }\r\n  \r\n  handleInputChange = (e) => {\r\n    //changes the state of the value of the input field to reflect what is being typed\r\n    this.setState({\r\n\t\t\ttask: {\r\n\t\t\t\ttext: e.target.value,\r\n\t\t\t\tmessage: e.target.value,\r\n\t\t\t\tid: this.state.task.id,\r\n        isEditable: false,\r\n        changeText: \"\",\r\n\t\t\t},\r\n\t\t});\r\n  };\r\n\r\n  handleEditChange = (e) => {\r\n    console.log(\r\n\t\t\t`handleChange before -> state changeText: ${this.state.task.changeText}, state message: ${this.state.task.message}`\r\n\t\t);\r\n    this.setState({\r\n\t\t\ttask: {\r\n\t\t\t\ttext: \"\",\r\n\t\t\t\tchangeText: e.target.value,\r\n\t\t\t\tmessage: e.target.value,\r\n\t\t\t\tid: this.state.task.id,\r\n\t\t\t\tisEditable: true,\r\n\t\t\t},\r\n    });\r\n    console.log(\r\n\t\t\t`handleChange after -> state changeText: ${this.state.task.changeText}, state message: ${this.state.task.message}`\r\n\t\t);\r\n  }\r\n\r\n  addTask = (e) => {\r\n    e.preventDefault();\r\n    // add the new task to the end of the array by updating the state of the array to reflect an addition\r\n\r\n    //check if value was empty\r\n    console.log(\"added task\");\r\n    this.setState({\r\n\t\t\t// tasks: [...this.state.tasks, this.state.task],\r\n\t\t\ttasks: this.state.tasks.concat(this.state.task),\r\n\t\t\t// set the state of the input field value back to an empty string to clear it\r\n\t\t\t// task: {\r\n      //   text: \"\",\r\n      //   changeText: \"\",\r\n      //   id: uniqid(),\r\n      //   message: this.state.task.message,\r\n      //   isEditable: false,\r\n\t\t\t// },\r\n\t\t\tcount: this.state.count + 1,\r\n    });\r\n\r\n    //reset task\r\n    this.resetTask();\r\n  };\r\n\r\n  resetTask = () => {\r\n    this.setState({\r\n\t\t\ttask: {\r\n\t\t\t\ttext: \"\",\r\n\t\t\t\tchangeText: \"\",\r\n\t\t\t\tmessage: \"\",\r\n\t\t\t\t// sets id to a unique id based on time. etc.\r\n\t\t\t\tid: uniqid(),\r\n\t\t\t\tisEditable: false,\r\n\t\t\t},\r\n\t\t});\r\n  }\r\n\r\n  deleteTask = (id) => {\r\n    //set the state of the array equal to the filtered away, filtering out the task with matching id to delete\r\n    this.setState({\r\n      tasks: this.state.tasks.filter(task => {\r\n        return task.id !== id;\r\n      }),\r\n      //decrease total count\r\n      count: this.state.count - 1,\r\n    })\r\n  };\r\n  \r\n  allowEdit = (id, message) => {\r\n    console.log(`allow edit before -> state changeText: ${this.state.task.changeText}, state message: ${this.state.task.message} message: ${message}`);\r\n    const copy = [...this.state.tasks];\r\n    const index = copy.findIndex(task => {\r\n      return task.id === id;\r\n    });\r\n    copy[index] = {\r\n\t\t\tisEditable: true,\r\n\t\t\t// text: \"\",\r\n\t\t\tmessage: message,\r\n\t\t\tchangeText: \"\",\r\n\t\t\tid: id,\r\n\t\t};\r\n    \r\n    this.setState({\r\n      tasks: [...copy],\r\n      count: this.state.count,\r\n    });\r\n    console.log(\r\n\t\t\t`allow edit after -> state changeText: ${this.state.task.changeText}, state message: ${this.state.task.message} message: ${message}`\r\n\t\t);\r\n  };\r\n\r\n  replaceTask = (id, message) => {\r\n    console.log(\r\n\t\t\t`replaceTask before -> state changeText: ${this.state.task.changeText}, state message: ${this.state.task.message} message: ${message}`\r\n\t\t);\r\n\r\n    //make copy of tasks array, search for that id, change task at that id, spread copy array into state array\r\n    const copy = [...this.state.tasks];\r\n    const index = copy.findIndex(task => {\r\n      return task.id === id;\r\n    });\r\n\r\n    //if the message state has text update it to that\r\n    if (this.state.task.message !== \"\") {\r\n      copy[index] = {\r\n\t\t\t\tisEditable: false,\r\n\t\t\t\ttext: \"\",\r\n\t\t\t\tmessage: this.state.task.message,\r\n\t\t\t\tchangeText: \"\",\r\n\t\t\t\tid: id,\r\n\t\t\t};\r\n    }\r\n    //if the message stae doesnt have state keep message as message\r\n    else if(this.state.task.message === \"\"){\r\n      copy[index] = {\r\n\t\t\t\tisEditable: false,\r\n\t\t\t\ttext: \"\",\r\n\t\t\t\tmessage: message,\r\n\t\t\t\tchangeText: \"\",\r\n\t\t\t\tid: id,\r\n\t\t\t};\r\n    }\r\n    \r\n\r\n    // if(this.state.task.changeText !== message)\r\n    // copy[index] = {\r\n\t\t// \tisEditable: true,\r\n    //   text: \"\",\r\n    //   message: message,\r\n    //   changeText: \"\",\r\n    //   id: id,\r\n\t\t// };\r\n\r\n    this.setState({\r\n\t\t\ttasks: [...copy],\r\n      count: this.state.count\r\n\t\t});\r\n\r\n\t\t//reset task\r\n\t\tthis.resetTask();\r\n    // //if changeText isnt undefined, update message\r\n    // const copy = [...this.state.tasks];\r\n    // const index = copy.findIndex((task) => {\r\n\t\t// \treturn task.id === id;\r\n    // });\r\n    \r\n    // // if (this.state.task.changeText === \"\" || this.state.task.changeText === message || this.state.task.message === message) {\r\n    // if ( this.state.task.changeText === \"\") {\r\n    //   copy[index] = {\r\n    //     isEditable: false,\r\n    //     // text: \"\",\r\n    //     message: message,\r\n    //     changeText: \"\",\r\n    //     id: id,\r\n    //   };\r\n    // }\r\n    // else {\r\n    //   console.log(\r\n\t\t// \t\t\"change\",\r\n\t\t// \t\tmessage,\r\n\t\t// \t\tthis.state.task.changeText,\r\n\t\t// \t\tthis.state.task.message\r\n\t\t// \t);\r\n    //   copy[index] = {\r\n    //     isEditable: false,\r\n    //     // text: \"\",\r\n    //     message: this.state.task.message,\r\n    //     changeText: \"\",\r\n    //     id: id,\r\n    //   };\r\n      \r\n    // }\r\n\r\n    // this.setState({\r\n    //   tasks: [...copy],\r\n    //   count: this.state.count,\r\n    // });\r\n    console.log(\r\n\t\t\t`replaceTask after -> state changeText: ${this.state.task.changeText}, state message: ${this.state.task.message} message: ${message}`\r\n\t\t);\r\n  };\r\n\r\n  render() {\r\n    //desstructure props\r\n    const { task, tasks, count } = this.state;\r\n    return (\r\n\t\t\t<div>\r\n\t\t\t\t<form>\r\n\t\t\t\t\t<h1 className=\"title\">Task List</h1>\r\n\t\t\t\t\t<label htmlFor=\"input\">Enter Task</label>\r\n\t\t\t\t\t<input\r\n\t\t\t\t\t\tonChange={this.handleInputChange}\r\n\t\t\t\t\t\tvalue={task.text} //will change based on the state of the task value inside the event handler\r\n\t\t\t\t\t\ttype=\"text\"\r\n\t\t\t\t\t\tid=\"input\"\r\n\t\t\t\t\t\tclassName=\"input\"\r\n\t\t\t\t\t></input>\r\n\t\t\t\t\t<button type=\"submit\" onClick={this.addTask}>\r\n\t\t\t\t\t\tAdd Task\r\n\t\t\t\t\t</button>\r\n\t\t\t\t</form>\r\n        <Overview tasks={tasks} count={count} deleteTask={this.deleteTask} allowEdit={this.allowEdit} handleEditChange={this.handleEditChange} replaceTask={this.replaceTask}/>\r\n\t\t\t</div>\r\n\t\t);\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n// import './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n\r\n"],"sourceRoot":""}